{"version":3,"sources":["components/LinkForm.js","firebase.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["LinkForm","props","initialStateValues","url","name","description","useState","values","setValues","handleInputChange","e","target","value","className","onSubmit","preventDefault","addOrEditLink","type","placeholder","onChange","rows","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Links","links","setLinks","setCurrentId","linkObject","a","collection","doc","set","toast","onDeleteLink","id","window","confirm","delete","autoClose","getLinks","onSnapshot","querySnapshot","docs","forEach","push","data","useEffect","map","link","key","onClick","href","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5da1d84a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const LinkForm = (props) => {\n\n  const initialStateValues = {\n    url: '',\n    name: '',\n    description: ''\n  }\n\n  const [values, setValues] = useState(initialStateValues);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setValues ({ ...values, [name]: value});\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    props.addOrEditLink(values)\n    setValues({...initialStateValues})\n  }\n\n  return (\n    <form className=\"card card-body\" onSubmit={handleSubmit}>\n      <div className=\"form-group input-group\">\n        <div className=\"input-group-text bg-light\">\n          <i className=\"material-icons\">insert_link</i>\n        </div>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"https://someurl.com\"\n          name=\"url\"\n          onChange={handleInputChange}\n          value= {values.url}\n        />\n      </div>\n\n      <div className=\"form-group input-group\">\n        <div className=\"input-group-text bg-light\">\n          <i className=\"material-icons\">create</i>\n        </div>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          name=\"name\"\n          placeholder=\"Webside name\"\n          onChange={handleInputChange}\n          value= {values.name}\n        />\n      </div>\n      <div className=\"form-group\">\n        <textarea\n          name=\"description\"\n          rows=\"3\"\n          className=\"form-control\"\n          placeholder=\"Write a description\"\n          onChange={handleInputChange}\n\n          value= {values.description}\n        ></textarea>\n      </div>\n      <button className=\"btn btn-primary btn-block\">\n        Save\n      </button>\n    </form>\n  )\n}\n\nexport default LinkForm;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyC-t2d5pL9OG0jDH0TS4S-vSAGZwdYY1Pg\",\n  authDomain: \"fb-crud-react-d.firebaseapp.com\",\n  databaseURL: \"https://fb-crud-react-d.firebaseio.com\",\n  projectId: \"fb-crud-react-d\",\n  storageBucket: \"fb-crud-react-d.appspot.com\",\n  messagingSenderId: \"579780434176\",\n  appId: \"1:579780434176:web:d7e845ec4e54d6f894bbe5\"\n};\n// Initialize Firebase\nconst fb = firebase.initializeApp(firebaseConfig);\n\nexport const db = fb.firestore();","import React, { useEffect, useState } from 'react';\nimport LinkForm from './LinkForm';\nimport { toast } from 'react-toastify';\n\n\nimport { db } from '../firebase'\n\nexport const Links = () => {\n\n  const [links, setLinks] = useState([])\n  const { setCurrentId } = useState('')\n\n  const addOrEditLink = async (linkObject) => {\n    await db.collection('links').doc().set(linkObject)\n    toast('New Link added',{type:'success'})\n  }\n\n  const onDeleteLink = async (id) => {\n    if(window.confirm(\"Estas seguro de eliminar este link ?\")){\n      await db.collection('links').doc(id).delete();\n      toast('Link Delete',{\n        type:'error',\n        autoClose: 2000\n      })\n    }\n  }\n\n  const getLinks = async () => {\n    db\n      .collection('links').onSnapshot((querySnapshot) => {\n        const docs = [];\n        querySnapshot.forEach(doc => {\n          docs.push({ ...doc.data(), id: doc.id })\n        })\n        setLinks(docs)\n      }\n      );\n  }\n\n  useEffect(() => {\n    getLinks()\n  }, [])\n\n  return (\n    <div>\n      <div className=\"col-md-4 p-2\">\n        <LinkForm addOrEditLink={addOrEditLink} />\n      </div>\n      <div className=\"col-md-8 p-2\">\n        {links.map((link) => (\n          <div className=\"card mb-1\" key={link.id}>\n            <div className=\"card-body\">\n              <div className=\"d-flex justify-content-between\">\n                <h4>{link.name}</h4>\n                <div>\n                <i\n                  className=\"material-icons text-danger\"\n                  onClick={() => onDeleteLink(link.id)}\n                >close</i>\n                <i \n                  className=\"material-icons\"\n                  onClick={() => setCurrentId(link.id)}\n                >\n                  create\n                </i>\n                </div>\n              </div>\n              <p>{link.description}</p>\n              <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\">Go to website</a>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Links;","import React from 'react';\nimport './App.css';\nimport {ToastContainer} from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Links from './components/Links';\n\nfunction App() {\n\n\n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n        <Links/>\n      </div>\n      <ToastContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './firebase';\nimport 'bootswatch/dist/superhero/bootstrap.min.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}